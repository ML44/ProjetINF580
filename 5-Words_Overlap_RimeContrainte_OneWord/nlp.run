#nlp.run
model nlp.mod;
param lastWord1;
param lastWord2;

data dataGeneration/data/rimes.dat;
data dataGeneration/data/enchainement.dat;
data dataGeneration/data/syllabes.dat;
data dataGeneration/data/index.dat;
data dataGeneration/data/n.dat;
data dataGeneration/data/lastWord.dat;

option solver cplex;
option cplex_options "mipdisplay=2";


param NombrePieds = 12;
param l = 2 * NombrePieds;
set L = 1..l;
set presqueL = 1..l-1;

param phrase1{L} default 0;
param phrase2{L} default 0;

#calcul du premier vers
let lastWord := lastWord1;
let phrase1[l] := lastWord;
let LongueurMax := 12 - syllabes[lastWord];

for{i in presqueL}{
	solve;
	let lastWord := sum {j in N} mot[j]*j;
	let phrase1[l-i] := lastWord;
	let LongueurMax := LongueurMax - syllabes[lastWord];
}

#calcul du second vers
let lastWord := lastWord2;
let phrase2[l] := lastWord;
let LongueurMax := 12 - syllabes[lastWord];

for{i in presqueL}{
	solve;
	let lastWord := sum {j in N} mot[j]*j;
	let phrase2[l-i] := lastWord;
	let LongueurMax := LongueurMax - syllabes[lastWord];
}


for {b in L} {
	if phrase1[b] >= 1 then printf " %s", index[phrase1[b]];
}

printf "\n";

for {b in L} {
	if phrase2[b] >= 1 then printf " %s", index[phrase2[b]];
}

printf "\n";

